import datetime
import queue
from abc import ABCMeta, abstractmethod
import os
import sys
import numpy as np
import pandas as pd
sys.path.append(os.path.abspath("MyStrategy"))
import H_calculation as calH
from event import SignalEvent


class Strategy(object):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    The goal of a (derived) Strategy object is to generate Signal
    objects for particular symbols based on the inputs of Bars
    (OLHCVI) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Strategy object is agnostic to the data source,
    since it obtains the bar tuples from a queue object.
    """

    __metaclass__ = ABCMeta

    @abstractmethod
    def calculate_signals(self):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")


class BuyAndHoldStrategy(Strategy):
    """
    This is an extremely simple strategy that goes LONG all of the
    symbols as soon as a bar is received. It will never exit a position.

    It is primarily used as a testing mechanism for the Strategy class
    as well as a benchmark upon which to compare other strategies.
    """

    def __init__(self, bars, events):
        """
        Initialises the buy and hold strategy.

        Parameters:
        bars - The DataHandler object that provides bar information
        events - The Event Queue object.
        """
        self.bars = bars
        self.symbol_list = self.bars.symbol_list
        self.events = events

        # Once buy & hold signal is given, these are set to True
        self.bought = self._calculate_initial_bought()

    def _calculate_initial_bought(self):
        """
        Adds keys to the bought dictionary for all symbols
        and sets them to False.
        """
        bought = {}
        for s in self.symbol_list:
            bought[s] = False
        return bought

    def calculate_signals(self, event):
        """
        For "Buy and Hold" we generate a single signal per symbol
        and then no additional signals. This means we are
        constantly long the market from the date of strategy
        initialisation.

        Parameters
        event - A MarketEvent object.
        """

        if event.type == 'MARKET':
            for s in self.symbol_list:
                bars = self.bars.get_latest_bars(s, n=50)
                
                # get last close price, calculate the H,(date,days,stock_data)
                last_n_data=pd.DataFrame([bars[-i][5] for i in range(len(bars))])
                isMmt=calH.H_calc(bars[0],50,last_n_data)
                avr10=sum(last_n_data[-5:])
                if bars is not None and bars != []:
                    # if there is no position yet
                    if self.bought[s] == False and isMmt>0.75:
                        print(isMmt)
                        # bars[-1] is the latest price info [5] is close, bars[0] is n=5 days ago
                        if bars[-1][5] >= avr10:
                            direction = 'LONG'
                            strength = 5
                            self.bought[s] = True
                        else:
                            direction = 'SHORT'
                            strength = 0
                            self.bought[s] = True
                    # if there is position
                    else:
                        direction = 'EXIT'
                        strength = 5
                        self.bought[s] = False
                        # (Symbol, Datetime, Type = LONG, SHORT or EXIT,and the strength of the signal)

                    signal = SignalEvent(bars[-1][0], bars[-1][1], direction, strength)
                    self.events.put(signal)

                    if len(bars)>1:
                        if bars[-1][1].month != bars[-2][1].month and s==self.symbol_list[0]:
                            print(bars[-1][1])
